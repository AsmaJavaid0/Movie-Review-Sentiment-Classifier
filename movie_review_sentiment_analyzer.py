# -*- coding: utf-8 -*-
"""movie review sentiment Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kGEw_R3996Y6Anyh3j3sdF1BG9KFi3YC
"""



"""# **Import Data From nltk**"""

import nltk

nltk.download('movie_reviews')

from nltk.corpus import movie_reviews

import pandas as pd
import numpy as np

# Get the file identifiers for positive and negative reviews
positive_fields = movie_reviews.fileids('pos')
negative_fields = movie_reviews.fileids('neg')

# Create lists to store review text and sentiment
reviews = []
sentiments = []

# Iterate through positive reviews
for field in positive_fields:
    reviews.append(movie_reviews.raw(field))
    sentiments.append('positive')

# Iterate through negative reviews
for field in negative_fields:
    reviews.append(movie_reviews.raw(field))
    sentiments.append('negative')

# Create a DataFrame
data = pd.DataFrame({'review': reviews, 'sentiment': sentiments})
data

"""# **Data** **Preprocessing**"""

data.shape

data.info()

data.drop_duplicates(inplace=True)
data.shape

# Data Splitting
x = data['review']
y = data['sentiment']

"""# **Vectorization for Feature Extraction**"""

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

vectorizer = TfidfVectorizer(max_features=5000)
X_encoded = vectorizer.fit_transform(x)

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
X_array = X_encoded.toarray()

"""# **Training on Logistic Regression Model**"""

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix

#  Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X_array, y_encoded, test_size=0.2)

#  Train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

"""# **Predictions and Accuracy Test**"""

#  Make predictions
y_pred = model.predict(X_test)

#  Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred)*100)

"""# **Testing on Inputs**"""

#  Take review input
review = ["man! what horrific scenes, that was insane ","So emotional and heart warming ","That was so lame and boring"]

#  Preprocess it using the same vectorizer
for r in review:
  vector = vectorizer.transform([r])

#  Predict sentiment
  prediction = model.predict(vector)
  predicted_label = label_encoder.inverse_transform(prediction)

#  Display result
  print("Review:", r)
  print("Predicted Sentiment:", predicted_label[0])

"""# **Saving the Model using joblib**"""

import joblib

# Save  model
joblib.dump(model, 'logistic_model.pkl')

# Save  vectorizer
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')

# Save  label encoder
joblib.dump(label_encoder, 'label_encoder.pkl')

